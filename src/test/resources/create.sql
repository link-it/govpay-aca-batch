CREATE TABLE IF NOT EXISTS applicazioni
(
	cod_applicazione VARCHAR(35) NOT NULL,
	auto_iuv BOOLEAN NOT NULL,
	firma_ricevuta VARCHAR(1) NOT NULL,
	cod_connettore_integrazione VARCHAR(255),
	trusted BOOLEAN NOT NULL,
	cod_applicazione_iuv VARCHAR(3),
	reg_exp VARCHAR(1024),
	-- fk/pk columns
	id BIGINT,
	-- id BIGINT GENERATED BY DEFAULT AS SEQUENCE seq_applicazioni,
	principal VARCHAR(4000) NOT NULL,
	-- unique constraints
	CONSTRAINT unique_applicazioni_1 UNIQUE (cod_applicazione),
	CONSTRAINT unique_applicazioni_2 UNIQUE (principal),
	-- fk/pk keys constraints
	CONSTRAINT pk_applicazioni PRIMARY KEY (id)
);

-- index
CREATE UNIQUE INDEX IF NOT EXISTS index_applicazioni_1 ON applicazioni (cod_applicazione);
CREATE UNIQUE INDEX IF NOT EXISTS index_applicazioni_2 ON applicazioni (principal);

CREATE TABLE IF NOT EXISTS domini
(
	cod_dominio VARCHAR(35) NOT NULL,
	gln VARCHAR(35),
	abilitato BOOLEAN NOT NULL,
	ragione_sociale VARCHAR(70) NOT NULL,
	aux_digit INT NOT NULL,
	iuv_prefix VARCHAR(255),
	segregation_code INT,
	logo VARBINARY(16777215),
	cbill VARCHAR(255),
	aut_stampa_poste VARCHAR(255),
	intermediato BOOLEAN NOT NULL,
	tassonomia_pago_pa VARCHAR(35),
	-- fk/pk columns
	id BIGINT,
	-- id BIGINT GENERATED BY DEFAULT AS SEQUENCE seq_domini,
	id_stazione BIGINT,
	id_applicazione_default BIGINT,
	-- unique constraints
	CONSTRAINT unique_domini_1 UNIQUE (cod_dominio),
	-- fk/pk keys constraints
	CONSTRAINT fk_dom_id_applicazione_default FOREIGN KEY (id_applicazione_default) REFERENCES applicazioni(id),
	CONSTRAINT pk_domini PRIMARY KEY (id)
);

-- index
CREATE UNIQUE INDEX IF NOT EXISTS index_domini_1 ON domini (cod_dominio);
ALTER TABLE domini ALTER COLUMN aux_digit SET DEFAULT 0;


CREATE TABLE IF NOT EXISTS iban_accredito
(
	cod_iban VARCHAR(255) NOT NULL,
	postale BOOLEAN NOT NULL,
	-- fk/pk columns
	-- id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
	id BIGINT,
	id_dominio BIGINT NOT NULL,
	-- unique constraints
	CONSTRAINT unique_iban_accredito_1 UNIQUE (cod_iban,id_dominio),
	-- fk/pk keys constraints
	CONSTRAINT fk_iba_id_dominio FOREIGN KEY (id_dominio) REFERENCES domini(id),
	CONSTRAINT pk_iban_accredito PRIMARY KEY (id)
);

-- index
CREATE UNIQUE INDEX IF NOT EXISTS index_iban_accredito_1 ON iban_accredito (cod_iban,id_dominio);


CREATE TABLE IF NOT EXISTS tipi_tributo
(
	cod_tributo VARCHAR(255) NOT NULL,
	tipo_contabilita VARCHAR(1),
	cod_contabilita VARCHAR(255),
	-- fk/pk columns
	-- id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
	id BIGINT,
	-- unique constraints
	CONSTRAINT unique_tipi_tributo_1 UNIQUE (cod_tributo),
	-- fk/pk keys constraints
	CONSTRAINT pk_tipi_tributo PRIMARY KEY (id)
);

-- index
CREATE UNIQUE INDEX IF NOT EXISTS index_tipi_tributo_1 ON tipi_tributo (cod_tributo);


CREATE TABLE IF NOT EXISTS tributi
(
	abilitato BOOLEAN NOT NULL,
	tipo_contabilita VARCHAR(1),
	codice_contabilita VARCHAR(255),
	-- fk/pk columns
	-- id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
	id BIGINT,
	id_dominio BIGINT NOT NULL,
	id_iban_accredito BIGINT,
	id_iban_appoggio BIGINT,
	id_tipo_tributo BIGINT NOT NULL,
	-- unique constraints
	CONSTRAINT unique_tributi_1 UNIQUE (id_dominio,id_tipo_tributo),
	-- fk/pk keys constraints
	CONSTRAINT fk_trb_id_dominio FOREIGN KEY (id_dominio) REFERENCES domini(id),
	CONSTRAINT fk_trb_id_iban_accredito FOREIGN KEY (id_iban_accredito) REFERENCES iban_accredito(id),
	CONSTRAINT fk_trb_id_iban_appoggio FOREIGN KEY (id_iban_appoggio) REFERENCES iban_accredito(id),
	CONSTRAINT fk_trb_id_tipo_tributo FOREIGN KEY (id_tipo_tributo) REFERENCES tipi_tributo(id),
	CONSTRAINT pk_tributi PRIMARY KEY (id)
);

-- index
CREATE UNIQUE INDEX IF NOT EXISTS index_tributi_1 ON tributi (id_dominio,id_tipo_tributo);


CREATE TABLE IF NOT EXISTS uo
(
	cod_uo VARCHAR(35) NOT NULL,
	uo_denominazione VARCHAR(70),
	-- fk/pk columns
	-- id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
	id BIGINT,
	id_dominio BIGINT NOT NULL,
	-- unique constraints
	CONSTRAINT unique_uo_1 UNIQUE (cod_uo,id_dominio),
	-- fk/pk keys constraints
	CONSTRAINT fk_uo_id_dominio FOREIGN KEY (id_dominio) REFERENCES domini(id),
	CONSTRAINT pk_uo PRIMARY KEY (id)
);

-- index
CREATE UNIQUE INDEX IF NOT EXISTS index_uo_1 ON uo (cod_uo,id_dominio);


CREATE TABLE IF NOT EXISTS versamenti
(
	cod_versamento_ente VARCHAR(35) NOT NULL,
	importo_totale DOUBLE NOT NULL,
	stato_versamento VARCHAR(35) NOT NULL,
	data_creazione TIMESTAMP NOT NULL,
	data_validita TIMESTAMP,
	data_scadenza TIMESTAMP,
	causale_versamento VARCHAR(1024),
	debitore_tipo VARCHAR(1),
	debitore_identificativo VARCHAR(35) NOT NULL,
	debitore_anagrafica VARCHAR(70) NOT NULL,
	debitore_indirizzo VARCHAR(70),
	debitore_civico VARCHAR(16),
	debitore_cap VARCHAR(16),
	debitore_localita VARCHAR(35),
	debitore_provincia VARCHAR(35),
	debitore_nazione VARCHAR(2),
	debitore_email VARCHAR(256),
	debitore_telefono VARCHAR(35),
	debitore_cellulare VARCHAR(35),
	debitore_fax VARCHAR(35),
	iuv_versamento VARCHAR(35),
	numero_avviso VARCHAR(35),
	cod_rata VARCHAR(35),
	data_ultima_modifica_aca TIMESTAMP,
	data_ultima_comunicazione_aca TIMESTAMP,
	-- fk/pk columns
	id BIGINT,
	id_dominio BIGINT NOT NULL,
	id_applicazione BIGINT NOT NULL,
	id_uo BIGINT,
	-- unique constraints
	CONSTRAINT unique_versamenti_1 UNIQUE (cod_versamento_ente,id_applicazione),
	-- fk/pk keys constraints
	CONSTRAINT fk_vrs_id_dominio FOREIGN KEY (id_dominio) REFERENCES domini(id),
	CONSTRAINT fk_vrs_id_applicazione FOREIGN KEY (id_applicazione) REFERENCES applicazioni(id),
	CONSTRAINT pk_versamenti PRIMARY KEY (id)
);

-- index
CREATE INDEX IF NOT EXISTS idx_vrs_id_pendenza ON versamenti (cod_versamento_ente,id_applicazione);
CREATE INDEX IF NOT EXISTS idx_vrs_data_creaz ON versamenti (data_creazione DESC);
CREATE INDEX IF NOT EXISTS idx_vrs_stato_vrs ON versamenti (stato_versamento);
CREATE INDEX IF NOT EXISTS idx_vrs_sped_aca ON versamenti (data_ultima_modifica_aca DESC,data_ultima_comunicazione_aca DESC);


CREATE TABLE IF NOT EXISTS singoli_versamenti
(
	cod_singolo_versamento_ente VARCHAR(70) NOT NULL,
	stato_singolo_versamento VARCHAR(35) NOT NULL,
	importo_singolo_versamento DOUBLE NOT NULL,
	-- MARCA BOLLO Valori possibili:\n01: Imposta di bollo
	tipo_bollo VARCHAR(2),
	-- MARCA BOLLO: Digest in Base64 del documento da bollare
	hash_documento VARCHAR(70),
	-- MARCA BOLLO: Sigla automobilistica della provincia di residenza
	provincia_residenza VARCHAR(2),
	tipo_contabilita VARCHAR(1),
	codice_contabilita VARCHAR(255),
	descrizione VARCHAR(256),
	indice_dati INT NOT NULL,
	descrizione_causale_rpt VARCHAR(140),
	metadata LONGVARCHAR,
	-- fk/pk columns
	-- id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
	id BIGINT,
	id_versamento BIGINT NOT NULL,
	id_tributo BIGINT,
	id_iban_accredito BIGINT,
	id_iban_appoggio BIGINT,
	id_dominio BIGINT,
	-- fk/pk keys constraints
	CONSTRAINT fk_sng_id_versamento FOREIGN KEY (id_versamento) REFERENCES versamenti(id),
	CONSTRAINT fk_sng_id_tributo FOREIGN KEY (id_tributo) REFERENCES tributi(id),
	CONSTRAINT fk_sng_id_iban_accredito FOREIGN KEY (id_iban_accredito) REFERENCES iban_accredito(id),
	CONSTRAINT fk_sng_id_iban_appoggio FOREIGN KEY (id_iban_appoggio) REFERENCES iban_accredito(id),
	CONSTRAINT fk_sng_id_dominio FOREIGN KEY (id_dominio) REFERENCES domini(id),
	CONSTRAINT pk_singoli_versamenti PRIMARY KEY (id)
);


CREATE VIEW IF NOT EXISTS v_versamenti_gpd AS 
SELECT versamenti.id,
    versamenti.cod_versamento_ente,
    versamenti.importo_totale,
    versamenti.stato_versamento,
    versamenti.data_validita,
    versamenti.data_scadenza,
    versamenti.causale_versamento,
    versamenti.debitore_identificativo,
    versamenti.debitore_tipo,
    versamenti.debitore_anagrafica,
    versamenti.debitore_indirizzo,
	versamenti.debitore_civico,
	versamenti.debitore_cap,
	versamenti.debitore_localita,
	versamenti.debitore_provincia,
	versamenti.debitore_nazione,
	versamenti.debitore_email,
	versamenti.debitore_telefono,
	versamenti.debitore_cellulare,
	versamenti.debitore_fax,
    versamenti.iuv_versamento,
    versamenti.numero_avviso,
    versamenti.cod_rata,
    applicazioni.cod_applicazione AS cod_applicazione,
    domini.cod_dominio AS cod_dominio,
    domini.ragione_sociale AS ragione_sociale_dominio,
    uo.cod_uo AS cod_uo,
    uo.uo_denominazione AS uo_denominazione,
    versamenti.data_ultima_modifica_aca,
    versamenti.data_ultima_comunicazione_aca
    FROM versamenti 
	JOIN domini ON versamenti.id_dominio = domini.id 
	JOIN applicazioni ON versamenti.id_applicazione = applicazioni.id
	LEFT JOIN uo ON versamenti.id_uo = uo.id;
    
    
CREATE VIEW IF NOT EXISTS v_sng_versamenti_gpd AS
SELECT
    sv.id AS sv_id,
    sv.id_versamento,
    d.cod_dominio,
    sv.cod_singolo_versamento_ente,
    sv.importo_singolo_versamento,
    sv.indice_dati,
    sv.descrizione AS sv_descrizione,
    sv.descrizione_causale_rpt,
    sv.metadata,
    sv.tipo_bollo,
    sv.hash_documento,
    sv.provincia_residenza,
    sv.tipo_contabilita AS sv_tipo_contabilita,
    sv.codice_contabilita AS sv_codice_contabilita,
    t.tipo_contabilita AS trb_tipo_contabilita,
    t.codice_contabilita AS trb_codice_contabilita,
    tt.tipo_contabilita AS tipo_trb_tipo_contabilita,
    tt.cod_contabilita AS tipo_trb_cod_contabilita,
    ia.cod_iban AS sv_iban_accredito,
    ia.postale AS sv_iban_accr_postale,
    ia_ap.cod_iban AS sv_iban_appoggio,
    ia_ap.postale AS sv_iban_app_postale,
    ia_tr.cod_iban AS trb_iban_accredito,
    ia_tr.postale AS trb_iban_accr_postale,
    ia_tr_ap.cod_iban AS trb_iban_appoggio,
    ia_tr_ap.postale AS trb_iban_app_postale
FROM
    singoli_versamenti sv
    LEFT JOIN tributi t ON sv.id_tributo = t.id
    LEFT JOIN tipi_tributo tt ON t.id_tipo_tributo = tt.id
    LEFT JOIN iban_accredito ia ON sv.id_iban_accredito = ia.id
    LEFT JOIN iban_accredito ia_ap ON sv.id_iban_appoggio = ia_ap.id
    LEFT JOIN iban_accredito ia_tr ON t.id_iban_accredito = ia_tr.id
    LEFT JOIN iban_accredito ia_tr_ap ON t.id_iban_appoggio = ia_tr_ap.id
    LEFT JOIN domini d ON sv.id_dominio = d.id;
    
    
    
    
    
    
    
    