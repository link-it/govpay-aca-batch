/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.govpay.gpd.gde.client;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;

import it.govpay.gde.client.api.impl.ApiClient;
import it.govpay.gde.client.api.impl.ApiException;
import it.govpay.gde.client.beans.NuovoEvento;

public class EventiApi {

	private final Logger logger = LoggerFactory.getLogger(EventiApi.class);

	private final HttpClient memberVarHttpClient;
	private final ObjectMapper memberVarObjectMapper;
	private final String memberVarBaseUri;
	private final Consumer<HttpRequest.Builder> memberVarInterceptor;
	private final Duration memberVarReadTimeout;

	public EventiApi() {
		this(new ApiClient());
	}

	public EventiApi(ApiClient apiClient) {
		memberVarHttpClient = apiClient.getHttpClient();
		memberVarObjectMapper = apiClient.getObjectMapper();
		memberVarBaseUri = apiClient.getBaseUri();
		memberVarInterceptor = apiClient.getRequestInterceptor();
		memberVarReadTimeout = apiClient.getReadTimeout();
	}

	private HttpRequest.Builder addEventoRequestBuilder(NuovoEvento nuovoEvento) throws ApiException {
		// verify the required parameter 'nuovoEvento' is set
		if (nuovoEvento == null) {
			throw new ApiException(400, "Missing the required parameter 'nuovoEvento' when calling addEvento");
		}

		HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

		String localVarPath = "/eventi";

		localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

		localVarRequestBuilder.header("Content-Type", "application/json");
		localVarRequestBuilder.header("Accept", "application/problem+json");

		try {
			byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(nuovoEvento);
			localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
		} catch (IOException e) {
			throw new ApiException(e);
		}
		if (memberVarReadTimeout != null) {
			localVarRequestBuilder.timeout(memberVarReadTimeout);
		}
		if (memberVarInterceptor != null) {
			memberVarInterceptor.accept(localVarRequestBuilder);
		}
		return localVarRequestBuilder;
	}

	/**
	 * Salvataggio di un nuovo evento
	 *
	 * @param nuovoEvento (required)
	 * @return {@link CompletableFuture}
	 * @throws ApiException if fails to make API call
	 */
	public CompletableFuture<HttpResponse<InputStream>> addEventoWithHttpInfoAsync(NuovoEvento nuovoEvento) throws ApiException {
		HttpRequest.Builder localVarRequestBuilder = addEventoRequestBuilder(nuovoEvento);
		logger.debug("Invio evento per la pendenza [IdA2A:{}, ID:{}] al GDE", nuovoEvento.getIdA2A(), nuovoEvento.getIdPendenza());
	       
		return memberVarHttpClient.sendAsync(
				localVarRequestBuilder.build(),
				HttpResponse.BodyHandlers.ofInputStream())
				;
	}
}
