-- Create Sequences
CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 NOCYCLE;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 NOCYCLE;
CREATE SEQUENCE BATCH_JOB_SEQ MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 INCREMENT BY 1 CACHE 2 NOCYCLE;


-- Create Tables
CREATE TABLE BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID NUMBER NOT NULL,
    VERSION NUMBER,
    JOB_NAME VARCHAR2(100) NOT NULL,
    JOB_KEY VARCHAR2(32) NOT NULL,
    CONSTRAINT JOB_INST_UN unique (JOB_NAME, JOB_KEY),
    CONSTRAINT pk_bji PRIMARY KEY (JOB_INSTANCE_ID)
);

CREATE TRIGGER trg_batch_job
BEFORE
insert on BATCH_JOB_INSTANCE
for each row
begin
   IF (:new.JOB_INSTANCE_ID IS NULL) THEN
      SELECT BATCH_JOB_SEQ.nextval INTO :new.JOB_INSTANCE_ID
                FROM DUAL;
   END IF;
end;
/

CREATE TABLE BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID NUMBER NOT NULL,
    VERSION NUMBER,
    JOB_INSTANCE_ID NUMBER NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR2(10),
    EXIT_CODE VARCHAR2(2500),
    EXIT_MESSAGE VARCHAR2(2500),
    LAST_UPDATED TIMESTAMP,
    JOB_CONFIGURATION_LOCATION VARCHAR2(2500) NULL,
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID) REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID),
    CONSTRAINT pk_bje PRIMARY KEY (JOB_EXECUTION_ID)
);

CREATE TRIGGER trg_batch_job_ex
BEFORE
insert on BATCH_JOB_EXECUTION
for each row
begin
   IF (:new.JOB_EXECUTION_ID IS NULL) THEN
      SELECT BATCH_JOB_EXECUTION_SEQ.nextval INTO :new.JOB_EXECUTION_ID
                FROM DUAL;
   END IF;
end;
/

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID NUMBER NOT NULL,
    TYPE_CD VARCHAR2(6) NOT NULL,
    KEY_NAME VARCHAR2(100) NOT NULL,
    STRING_VAL VARCHAR2(250),
    DATE_VAL TIMESTAMP DEFAULT NULL,
    LONG_VAL NUMBER,
    DOUBLE_VAL BINARY_DOUBLE,
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID NUMBER NOT NULL,
    VERSION NUMBER NOT NULL,
    STEP_NAME VARCHAR2(100) NOT NULL,
    JOB_EXECUTION_ID NUMBER NOT NULL,
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR2(10),
    COMMIT_COUNT NUMBER,
    READ_COUNT NUMBER,
    FILTER_COUNT NUMBER,
    WRITE_COUNT NUMBER,
    READ_SKIP_COUNT NUMBER,
    WRITE_SKIP_COUNT NUMBER,
    PROCESS_SKIP_COUNT NUMBER,
    ROLLBACK_COUNT NUMBER,
    EXIT_CODE VARCHAR2(2500),
    EXIT_MESSAGE VARCHAR2(2500),
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID),
    CONSTRAINT pk_bse PRIMARY KEY (STEP_EXECUTION_ID)
);

CREATE TRIGGER trg_batch_step_ex
BEFORE
insert on BATCH_STEP_EXECUTION
for each row
begin
   IF (:new.STEP_EXECUTION_ID IS NULL) THEN
      SELECT BATCH_STEP_EXECUTION_SEQ.nextval INTO :new.STEP_EXECUTION_ID
                FROM DUAL;
   END IF;
end;
/

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID NUMBER NOT NULL,
    SHORT_CONTEXT VARCHAR2(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID) REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID),
    CONSTRAINT pk_bsec PRIMARY KEY (STEP_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID NUMBER NOT NULL,
    SHORT_CONTEXT VARCHAR2(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID),
    CONSTRAINT pk_bjec PRIMARY KEY (JOB_EXECUTION_ID)
);

